#include "EspMQTTClient.h"
#define VR_PIN A0 //enter your pin number
#define LED_B 19 //enter your pin number
#define LED_Y 18 //enter your pin number
#define LED_G 5 //enter your pin number
EspMQTTClient client(
    "wifi name",      // #1 wifi must be 2G
    "wifi password",        // #2
    "mosqutto server ip",     // #3   MQTT Broker server ip
    "MQTTUsername",     //      Can be omitted if not needed // 필요 없다면 생략 가능
    "MQTTPassword",     //      Can be omitted if not needed
    "client name",             // #4   Client name that uniquely identify your device
    1883                // #5   The MQTT port, default to 1883. this line can be omitted
);

//enter your topic
 char *topic = "myhome/firstfloor/kitchen/power";
 char *topic_led = "myhome/firstfloor/kitchen/led";
 char *topic_pwm = "myhome/firstfloor/kitchen/pwm";
 uint32_t vr_value = 0;

 void tx() {
    vr_value = analogRead(VR_PIN);
    int power = map(vr_value, 0, 4095, 100, 0);
    client.publish(topic, String(power));
    //clinet 분할해서 멀티채널로 보내면 관리하기 조금 더 편하다.
 }

void rx_led(const String &payload) {
  if(payload == "1on"){
     digitalWrite(LED_B, 1);
    }
    else if(payload == "1off"){
      digitalWrite(LED_B, 0);
    }
  else if(payload == "2on"){
     digitalWrite(LED_Y, 1);
    }
  else if( payload == "2off"){
      digitalWrite(LED_Y, 0);
    }
  return;
}

void rx_pwm(const String &payload){
     int power = payload.toInt();
     ledcWrite(0, power);
     return;
}

void setup() {
    Serial.begin(9600); // #6
    pinMode(LED_B, OUTPUT);
    pinMode(LED_Y, OUTPUT);
    ledcAttachPin(LED_G, 0);
    ledcSetup(0, 5000, 8);
    client.enableDebuggingMessages(); // Enable debugging messages sent to serial output
    client.enableHTTPWebUpdater(); // Enable the web updater. User and password default to values of MQTTUsername and MQTTPassword. These can be overrited with enableHTTPWebUpdater("user", "password").
    client.enableLastWillMessage("TestClient/lastwill", "I am going offline");  // You can activate the retain flag by setting the third parameter to true
}

// This function is called once everything is connected (Wifi and MQTT)
// WARNING : YOU MUST IMPLEMENT IT IF YOU USE EspMQTTClient
void onConnectionEstablished() {
    // Subscribe to "mytopic/test" and display received message to Serial
    //client.subscribe("mytopic/test", [](const String & payload) { Serial.println(payload); });
    
    // Subscribe to "mytopic/wildcardtest/#" and display received message to Serial
    //client.subscribe("mytopic/wildcardtest/#", [](const String & topic, const String & payload) { Serial.println(topic + ": " + payload); });
    
    // Publish a message to "mytopic/test"
    //client.publish("mytopic/test", "This is a message"); // You can activate the retain flag by setting the third parameter to true
    
    // Execute delayed instructions
    //client.executeDelayed(5 * 1000, []() { client.publish("mytopic/test", "This is a message sent 5 seconds later"); });

    // Subscribe 1회만 하면 지속적으로 콜백함수로 호출됨
    client.subscribe(topic_led, [](const String &payload) {
        rx_led(payload);
        //Serial.println(payload);    
    });

    client.subscribe(topic_pwm, [](const String &payload) {
      //get data for control led
      rx_pwm(payload);
        //Serial.println(payload);    
    });
    
}

void loop() {
    tx();   
    delay(1000);
    client.loop(); // 수신 용도
}
